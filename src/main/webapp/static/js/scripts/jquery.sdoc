/**
 * Scriptdoc-file for jQuery 1.2.1
 *
 * Created: Jan 25, 2007 19:31:20 GMT
 * Courtesy of Edwin Martin 
 * 
 * Updated: July 12, 2007
 * Updated by Michelle Petersen
 * 
 * Updated: Oct 15, 2007
 * Updated by Davey Waterson
 */

/**
 * This function accepts a string containing a CSS or basic XPath selector which is then used to match a set of elements.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>$</b>(<b>html</b>: String) : jQuery<br>
 * <br>
 * Create DOM elements on-the-fly from the provided String of raw HTML.<br>
 * <br>
 * <b>$</b>(<b>elems</b>: Element|Array) : jQuery<br>
 * <br>
 * Wrap jQuery functionality around a single or multiple DOM Element(s).<br>
 * <br>
 * <b>$</b>(<b>fn</b>: Function) : jQuery<br>
 * <br>
 * A shorthand for $(document).<br>
 * <br>
 * @id jQuery.$
 * @alias $
 * @alias jQuery
 * @alias jQuery.prototype.$
 * @param {String} expr
 * @param {Element|jQuery} context
 * @return {jQuery}
 */
function jQuery(){};

/**
 * The current version of jQuery.
 * @id jQuery.jquery
 * @alias jQuery.prototype.jquery
 * @return {String}
 */
function jQuery.jquery(){};

/**
 * The number of elements in the jQuery object.
 * @id jQuery.length
 * @alias $.length
 * @alias jQuery.prototype.length
 * @return {Number}
 */
function jQuery().length(){};

/**
 * The number of elements currently matched.
 * @method
 * @id jQuery.size
 * @alias $.size
 * @alias jQuery.prototype.size
 * @return {Number}
 */
function jQuery.size(){};

/**
 * Access all matched elements.
 * or get a document via ajax
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>get</b>(<b>num</b>: Number) : Element<br>
 * <br>
 * Access a single matched element.<BR>
 * <br>
 * <b>get</b>(<b>url</b>: String, <b>data</b>: Map, <b>callback</b>: Function) : XMLHttpRequest
 * <br><BR>
 * This is an easy way to send a simple GET request to a server without having to use 
 * the more complex $.ajax function. <BR>
 * It allows a single callback function to be specified that will be executed when 
 * the request is complete (and only if the response has a successful response code). 
 * <BR>If you need to have both error and success callbacks, you may want to use 
 * $.ajax.<br>
 * <br>
 * @id jQuery.get
 * @alias $.get
 * @alias jQuery.prototype.get
 * @return {Array}
 */
function jQuery.get(){};

/**
 * Set the jQuery object to an array of elements, while maintaining the stack.
 * @id jQuery.pushStack
 * @alias $.pushStack
 * @alias jQuery.prototype.pushStack
 * @param {Elements} elems
 * @return {jQuery}
 */
function jQuery.pushStack(){};

/**
 * Set the jQuery object to an array of elements.
 * @id jQuery.setArray
 * @alias $.setArray
 * @alias jQuery.prototype.setArray
 * @param {Elements} elems
 * @return {jQuery}
 */
function jQuery.setArray(){};

/**
 * Execute a function within the context of every matched element.
 * @id jQuery.each
 * @alias jQuery.prototype.each
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.each(){};

/**
 * Searches every matched element for the object and returns the index of the element, if found, starting with zero.
 * @id jQuery.index
 * @alias $.index
 * @alias jQuery.prototype.index
 * @param {Element} subject
 * @return {Number}
 */
function jQuery.index(){};

/**
 * Access a property on the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>attr</b>(<b>properties</b>: Map) : jQuery<br>
 * <br>
 * Set a key/value object as properties to all matched elements.<br>
 * <br>
 * <b>attr</b>(<b>key</b>: String, <b>value</b>: Object) : jQuery<br>
 * <br>
 * Set a single property to a value, on all matched elements.<br>
 * <br>
 * <b>attr</b>(<b>key</b>: String, <b>value</b>: Function) : jQuery<br>
 * <br>
 * Set a single property to a computed value, on all matched elements.<br>
 * <br>
 * @id jQuery.attr
 * @alias $.attr
 * @alias jQuery.prototype.attr
 * @param {String} name
 * @return {Object}
 */
function jQuery.attr(){};

/**
 * Access a style property on the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>css</b>(<b>properties</b>: Map) : jQuery<br>
 * <br>
 * Set a key/value object as style properties to all matched elements.<br>
 * <br>
 * <b>css</b>(<b>key</b>: String, <b>value</b>: String|Number) : jQuery<br>
 * <br>
 * Set a single style property to a value, on all matched elements.<br>
 * <br>
 * @id jQuery.css
 * @alias $.css
 * @alias jQuery.prototype.css
 * @param {String} name
 * @return {String}
 */
function jQuery.css(){};

/**
 * Get the text contents of all matched elements.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>text</b>(<b>val</b>: String) : String<br>
 * <br>
 * Set the text contents of all matched elements.<br>
 * <br>
 * @id jQuery.text
 * @alias $.text
 * @alias jQuery.prototype.text
 * @return {String}
 */
function jQuery.text(){};

/**
 * Wrap all matched elements with a structure of other elements.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>wrap</b>(<b>elem</b>: Element) : jQuery<br>
 * <br>
 * Wrap all matched elements with a structure of other elements.<br>
 * <br>
 * @id jQuery.wrap
 * @alias $.wrap
 * @alias jQuery.prototype.wrap
 * @param {String} html
 * @return {jQuery}
 */
function jQuery.wrap(){};

/**
 * Append content to the inside of every matched element.
 * @id jQuery.append
 * @alias $.append
 * @alias jQuery.prototype.append
 * @param {} content
 * @return {jQuery}
 */
function jQuery.append(){};

/**
 * Prepend content to the inside of every matched element.
 * @id jQuery.prepend
 * @alias $.prepend
 * @alias jQuery.prototype.prepend
 * @param {} content
 * @return {jQuery}
 */
function jQuery.prepend(){};

/**
 * Insert content before each of the matched elements.
 * @id jQuery.before
 * @alias $.before
 * @alias jQuery.prototype.before
 * @param {} content
 * @return {jQuery}
 */
function jQuery.before(){};

/**
 * Insert content after each of the matched elements.
 * @id jQuery.after
 * @alias $.after
 * @alias jQuery.prototype.after
 * @param {} content
 * @return {jQuery}
 */
function jQuery.after(){};

/**
 * End the most recent 'destructive' operation, reverting the list of matched elements back to its previous state.
 * @id jQuery.end
 * @alias $.end
 * @alias jQuery.prototype.end
 * @return {jQuery}
 */
function jQuery.end(){};

/**
 * Searches for all elements that match the specified expression.
 * @id jQuery.find
 * @alias $.find
 * @alias jQuery.prototype.find
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.find(){};

/**
 * Clone matched DOM Elements and select the clones.<BR>
 * <BR>
 * Calling the clone method with an argument 
 * is being deprecated (the clone method, as a whole, is being kept). <BR>
 * <BR>
 * Instead of calling <B>.clone(false)</B> you should now do: <b>.clone().empty()</B> instead.
 * @id jQuery.clone
 * @alias $.clone
 * @alias jQuery.prototype.clone
  * @return {jQuery}
 */
function jQuery.clone(){};

/**
 * Removes all elements from the set of matched elements that do not match the specified expression(s).
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>filter</b>(<b>filter</b>: Function) : jQuery<br>
 * <br>
 * Removes all elements from the set of matched elements that do not pass the specified filter.<br>
 * <br>
 * @id jQuery.filter
 * @alias $.filter
 * @alias jQuery.prototype.filter
 * @param {String} expression
 * @return {jQuery}
 */
function jQuery.filter(){};

/**
 * Removes the specified Element from the set of matched elements.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>not</b>(<b>expr</b>: String) : jQuery<br>
 * <br>
 * Removes elements matching the specified expression from the set of matched elements.<br>
 * <br>
 * <b>not</b>(<b>elems</b>: jQuery) : jQuery<br>
 * <br>
 * Removes any elements inside the array of elements from the set of matched elements.<br>
 * <br>
 * @id jQuery.not
 * @alias $.not
 * @alias jQuery.prototype.not
 * @param {Element} el
 * @return {jQuery}
 */
function jQuery.not(){};

/**
 * Adds more elements, matched by the given expression, to the set of matched elements.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>add</b>(<b>html</b>: String) : jQuery<br>
 * <br>
 * Adds more elements, created on the fly, to the set of matched elements.<br>
 * <br>
 * <b>add</b>(<b>elements</b>: Element|Array) : jQuery<br>
 * <br>
 * Adds one or more Elements to the set of matched elements.<br>
 * <br>
 * @id jQuery.add
 * @alias $.add
 * @alias jQuery.prototype.add
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.add(){};

/**
 * Checks the current selection against an expression and returns true, if at least one element of the selection fits the given expression.
 * @id jQuery.is
 * @alias $.is
 * @alias jQuery.prototype.is
 * @param {String} expr
 * @return {Boolean}
 */
function jQuery.is(){};

/**
 * Get the current value of the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>val</b>(<b>val</b>: String) : jQuery<br>
 * <br>
 * Set the value of every matched element.<br>
 * <br>
 * @id jQuery.val
 * @alias $.val
 * @alias jQuery.prototype.val
 * @return {String}
 */
function jQuery.val(){};

/**
 * Get the html contents of the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>html</b>(<b>val</b>: String) : jQuery<br>
 * <br>
 * Set the html contents of every matched element.<br>
 * <br>
 * @id jQuery.html
 * @alias $.html
 * @alias jQuery.prototype.html
 * @return {String}
 */
function jQuery.html(){};

/**
 * @id jQuery.domManip
 * @alias $.domManip
 * @alias jQuery.prototype.domManip
 * @param {Array} args
 * @param {Boolean} table
 * @param {Number} dir
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.domManip(){};

/**
 * Extends the jQuery object itself.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>$.extend</b>(<b>target</b>: Object, <b>prop1</b>: Object, <b>propN</b>: Object) : Object<br>
 * <br>
 * Extend one object with one or more others, returning the original, modified, object.<br>
 * <br>
 * @id jQuery.$.extend
 * @alias $.extend
 * @param {Object} prop
 * @return {Object}
 */
function jQuery.extend(){};

/**
 * Run this function to give control of the $ variable back to whichever library first implemented it.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>$.noConflict</b>(<b>extreme</b>) : jQuery<br>
 * <BR>Revert control of both the $ and jQuery variables to their original owners. 
 * <B>Use with discretion.</B>
 * <BR>This is a more-extreme version of the simple noConflict method, 
 * as this one will completely undo what jQuery has introduced. This is to be
 * used in an extreme case where you'd like to embed jQuery into a high-conflict 
 * environment. 
 * <BR><B>NOTE:</B> It's very likely that plugins won't work after this particular 
 * method has been called.
 * @id jQuery.$.noConflict
 * @alias $.noConflict
 * @return {jQuery}
 */
function jQuery.noConflict(){};

/**
 * A generic iterator function, which can be used to seemlessly iterate over both objects and arrays.
 * @id jQuery.$.each
 * @alias $.each
 * @param {Object} obj
 * @param {Function} fn
 * @return {Object}
 */
function jQuery.each(){};

/**
 * Remove the whitespace from the beginning and end of a string.
 * @id jQuery.$.trim
 * @alias $.trim
 * @param {String} str
 * @return {String}
 */
function jQuery.trim(){};

/**
 * Merge two arrays together, removing all duplicates.
 * @id jQuery.$.merge
 * @alias $.merge
 * @param {Array} first
 * @param {Array} second
 * @return {Array}
 */
function jQuery.merge(){};

/**
 * Filter items out of an array, by using a filter function.
 * @id jQuery.$.grep
 * @alias $.grep
 * @param {Array} array
 * @param {Function} fn
 * @param {Boolean} inv
 * @return {Array}
 */
function jQuery.grep(){};

/**
 * Translate all items in an array to another array of items.
 * @id jQuery.$.map
 * @alias $.map
 * @param {Array} array
 * @param {Function} fn
 * @return {Array}
 */
function jQuery.map(){};

/**
 * Contains flags for the useragent, read from navigator.
 * @id jQuery.$.browser
 * @alias $.browser
 * @return {Boolean}
 */
function jQuery.browser(){};

/**
 * Get a set of elements containing the unique parents of the matched set of elements.
 * @id jQuery.parent
 * @alias jQuery.prototype.parent
 * @alias $.parent
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.parent(){};

/**
 * Get a set of elements containing the unique ancestors of the matched set of elements (except for the root element).
 * @id jQuery.parents
 * @alias jQuery.prototype.parents
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.parents(){};

/**
 * Get a set of elements containing the unique next siblings of each of the matched set of elements.
 * @id jQuery.next
 * @alias $.next
 * @alias jQuery.prototype.next
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.next(){};

/**
 * Get a set of elements containing the unique previous siblings of each of the matched set of elements.
 * @id jQuery.prev
 * @alias $.prev
 * @alias jQuery.prototype.prev
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.prev(){};

/**
 * Get a set of elements containing all of the unique siblings of each of the matched set of elements.
 * @id jQuery.siblings
 * @alias $.siblings
 * @alias jQuery.prototype.siblings
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.siblings(){};

/**
 * Get a set of elements containing all of the unique children of each of the matched set of elements.
 * @id jQuery.children
 * @alias $.children
 * @alias jQuery.prototype.children
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.children(){};

/**
 * Append all of the matched elements to another, specified, set of elements.
 * @id jQuery.appendTo
 * @alias $.appendTo
 * @alias jQuery.prototype.appendTo
 * @param {} content
 * @return {jQuery}
 */
function jQuery.appendTo(){};

/**
 * Prepend all of the matched elements to another, specified, set of elements.
 * @id jQuery.prependTo
 * @alias $.prependTo
 * @alias jQuery.prototype.prependTo
 * @param {} content
 * @return {jQuery}
 */
function jQuery.prependTo(){};

/**
 * Insert all of the matched elements before another, specified, set of elements.
 * @id jQuery.insertBefore
 * @alias $.insertBefore
 * @alias jQuery.prototype.insertBefore
 * @param {} content
 * @return {jQuery}
 */
function jQuery.insertBefore(){};

/**
 * Insert all of the matched elements after another, specified, set of elements.
 * @id jQuery.insertAfter
 * @alias $.insertAfter
 * @alias jQuery.prototype.insertAfter
 * @param {} content
 * @return {jQuery}
 */
function jQuery.insertAfter(){};

/**
 * Remove an attribute from each of the matched elements.
 * @id jQuery.removeAttr
 * @alias $.removeAttr
 * @alias jQuery.prototype.removeAttr
 * @param {String} name
 * @return {jQuery}
 */
function jQuery.removeAttr(){};

/**
 * Adds the specified class(es) to each of the set of matched elements.
 * @id jQuery.addClass
 * @alias $.addClass
 * @alias jQuery.prototype.addClass
 * @param {String} class
 * @return {jQuery}
 */
function jQuery.addClass(){};

/**
 * Removes all or the specified class(es) from the set of matched elements.
 * @id jQuery.removeClass
 * @alias $.removeClass
 * @alias jQuery.prototype.removeClass
 * @param {String} class
 * @return {jQuery}
 */
function jQuery.removeClass(){};

/**
 * Adds the specified class if it is not present, removes it if it is present.
 * @id jQuery.toggleClass
 * @alias $.toggleClass
 * @alias jQuery.prototype.toggleClass
 * @param {String} class
 * @return {jQuery}
 */
function jQuery.toggleClass(){};

/**
 * Removes all matched elements from the DOM.
 * @id jQuery.remove
 * @alias $.remove
 * @alias jQuery.prototype.remove
 * @param {String} expr
 * @return {jQuery}
 */
function jQuery.remove(){};

/**
 * Removes all child nodes from the set of matched elements.
 * @id jQuery.empty
 * @alias $.empty
 * @alias jQuery.prototype.empty
 * @return {jQuery}
 */
function jQuery.empty(){};

/**
 * Reduce the set of matched elements to a single element.
 * @id jQuery.eq
 * @alias $.eq
 * @alias jQuery.prototype.eq
 * @param {Number} pos
 * @return {jQuery}
 */
function jQuery.eq(){};

/**
 * Reduce the set of matched elements to all elements before a given position.<BR>
 * <BR>This method is being deprecated in favor of the new <b>.slice()</b> method 
 * (which works identically to an array's slice method). <BR>
 * <BR>
 * You can duplicate <b>$("div").lt(2) </B>like so: <b>$("div").slice(0,2);</b>
 * @id jQuery.lt
 * @alias $.lt
 * @alias jQuery.prototype.lt
 * @param {Number} pos
 * @return {jQuery}
 */
function jQuery.lt(){};

/**
 * Reduce the set of matched elements to all elements after a given position.
 * <BR>This method is being deprecated in favor of the new <b>.slice()</b> method 
 * (which works identically to an array's slice method). <BR>
 * <BR>
 * You can duplicate <b>$("div").gt(2) </B>like so: <b>$("div").slice(2);</b>
 * @id jQuery.gt
 * @alias $.gt
 * @alias jQuery.prototype.gt
 * @param {Number} pos
 * @return {jQuery}
 */
function jQuery.gt(){};

/**
 * Filter the set of elements to those that contain the specified text.<BR>
 * <BR>
 * This method is being deprecated in favor of just using a regular .filter() 
 * statement. <BR>
 * <BR>
 * You can duplicate <B>.contains()</B> like so: <B>$("div").filter(":contains(Your Text)");</B>
 * @id jQuery.contains
 * @alias $.contains
 * @alias jQuery.prototype.contains
 * @param {String} str
 * @return {jQuery}
 */
function jQuery.contains(){};

/**
 * Get the current computed, pixel, width of the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>width</b>(<b>val</b>: String|Number) : jQuery<br>
 * <br>
 * Set the CSS width of every matched element.<br>
 * <br>
 * @id jQuery.width
 * @alias jQuery.prototype.width
 * @alias $.width
 * @return {String}
 */
function jQuery.width(){};

/**
 * Get the current computed, pixel, height of the first matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>height</b>(<b>val</b>: String|Number) : jQuery<br>
 * <br>
 * Set the CSS width of every matched element.<br>
 * <br>
 * @id jQuery.height
 * @alias $.height
 * @alias jQuery.prototype.height
 * @return {String}
 */
function jQuery.height(){};


/**
 * All ancestors of a given element.
 * @id jQuery.$.parents
 * @alias $.parents
 * @param {Element} elem
 * @return {Array}
 */
function jQuery.parents(){};

/**
 * A handy, and fast, way to traverse in a particular direction and find a specific element.
 * @id jQuery.$.nth
 * @alias $.nth
 * @param {DOMElement} cur
 * @param {String|Number} num
 * @param {String} dir
 * @return {DOMElement}
 */
function jQuery.nth(){};

/**
 * All elements on a specified axis.
 * @id jQuery.$.sibling
 * @alias $.sibling
 * @param {Element} elem
 * @return {Array}
 */
function jQuery.sibling(){};

/**
 * Binds a handler to a particular event (like click) for each matched element.
 * @id jQuery.bind
 * @alias $.bind
 * @alias jQuery.prototype.bind
 * @param {String} type
 * @param {Object} data
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.bind(){};

/**
 * Binds a handler to a particular event (like click) for each matched element.
 * @id jQuery.one
 * @alias $.one
 * @alias jQuery.prototype.one
 * @param {String} type
 * @param {Object} data
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.one(){};

/**
 * The opposite of bind, removes a bound event from each of the matched elements.
 * @id jQuery.unbind
 * @alias $.unbind
 * @alias jQuery.prototype.unbind
 * @param {String} type
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.unbind(){};

/**
 * Trigger a type of event on every matched element.
 * @id jQuery.trigger
 * @alias $.trigger
 * @alias jQuery.prototype.trigger
 * @param {String} type
 * @return {jQuery}
 */
function jQuery.trigger(){};

/**
 * Toggle between two function calls every other click.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>toggle</b>() : jQuery<br>
 * <br>
 * Toggles each of the set of matched elements.<br>
 * <br>
 * @id jQuery.toggle
 * @alias $.toggle
 * @alias jQuery.prototype.toggle
 * @param {Function} even
 * @param {Function} odd
 * @return {jQuery}
 */
function jQuery.toggle(){};

/**
 * A method for simulating hovering (moving the mouse on, and off, an object).
 * @id jQuery.hover
 * @alias $.hover
 * @alias jQuery.prototype.hover
 * @param {Function} over
 * @param {Function} out
 * @return {jQuery}
 */
function jQuery.hover(){};

/**
 * Bind a function to be executed whenever the DOM is ready to be traversed and manipulated.
 * @id jQuery.ready
 * @alias $.ready
 * @alias jQuery.prototype.ready
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.ready(){};

/**
 * Bind a function to the scroll event of each matched element.
 * @id jQuery.scroll
 * @alias $.scroll
 * @alias jQuery.prototype.scroll
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.scroll(){};

/**
 * Bind a function to the submit event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>submit</b>() : jQuery<br>
 * <br>
 * Trigger the submit event of each matched element.<br>
 * <br>
 * @id jQuery.submit
 * @alias $.submit
 * @alias jQuery.prototype.submit
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.submit(){};

/**
 * Bind a function to the focus event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>focus</b>() : jQuery<br>
 * <br>
 * Trigger the focus event of each matched element.<br>
 * <br>
 * @id jQuery.focus
 * @alias $.focus
 * @alias jQuery.prototype.focus
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.focus(){};

/**
 * Bind a function to the keydown event of each matched element.
 * @id jQuery.keydown
 * @alias $.keydown
 * @alias jQuery.prototype.keydown
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.keydown(){};

/**
 * Bind a function to the dblclick event of each matched element.
 * @id jQuery.dblclick
 * @alias $.dblclick
 * @alias jQuery.prototype.dblclick
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.dblclick(){};

/**
 * Bind a function to the keypress event of each matched element.
 * @id jQuery.keypress
 * @alias $.keypress
 * @alias jQuery.prototype.keypress
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.keypress(){};

/**
 * Bind a function to the error event of each matched element.
 * @id jQuery.error
 * @alias $.error
 * @alias jQuery.prototype.error
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.error(){};

/**
 * Bind a function to the blur event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>blur</b>() : jQuery<br>
 * <br>
 * Trigger the blur event of each matched element.<br>
 * <br>
 * @id jQuery.blur
 * @alias $.blur
 * @alias jQuery.prototype.blur
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.blur(){};

/**
 * Bind a function to the load event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>load</b>(<b>url</b>: String, <b>params</b>: Object, <b>callback</b>: Function) : jQuery<br>
 * <br>
 * Load HTML from a remote file and inject it into the DOM.<br>
 * <br>
 * @id jQuery.load
 * @alias $.load
 * @alias jQuery.prototype.load
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.load(){};

/**
 * Bind a function to the select event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>select</b>() : jQuery<br>
 * <br>
 * Trigger the select event of each matched element.<br>
 * <br>
 * @id jQuery.select
 * @alias $.select
 * @alias jQuery.prototype.select
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.select(){};

/**
 * Bind a function to the mouseup event of each matched element.
 * @id jQuery.mouseup
 * @alias $.mouseup
 * @alias jQuery.prototype.mouseup
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.mouseup(){};

/**
 * Bind a function to the unload event of each matched element.
 * @id jQuery.unload
 * @alias $.unload
 * @alias jQuery.prototype.unload
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.unload(){};

/**
 * Bind a function to the change event of each matched element.
 * @id jQuery.change
 * @alias $.change
 * @alias jQuery.prototype.change
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.change(){};

/**
 * Bind a function to the mouseout event of each matched element.
 * @id jQuery.mouseout
 * @alias $.mouseout
 * @alias jQuery.prototype.mouseout
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.mouseout(){};

/**
 * Bind a function to the keyup event of each matched element.
 * @id jQuery.keyup
 * @alias $.keyup
 * @alias jQuery.prototype.keyup
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.keyup(){};

/**
 * Bind a function to the click event of each matched element.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>click</b>() : jQuery<br>
 * <br>
 * Trigger the click event of each matched element.<br>
 * <br>
 * @id jQuery.click
 * @alias $.click
 * @alias jQuery.prototype.click
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.click(){};

/**
 * Bind a function to the resize event of each matched element.
 * @id jQuery.resize
 * @alias $.resize
 * @alias jQuery.prototype.resize
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.resize(){};

/**
 * Bind a function to the mousemove event of each matched element.
 * @id jQuery.mousemove
 * @alias $.mousemove
 * @alias jQuery.prototype.mousemove
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.mousemove(){};

/**
 * Bind a function to the mousedown event of each matched element.
 * @id jQuery.mousedown
 * @alias $.mousedown
 * @alias jQuery.prototype.mousedown
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.mousedown(){};

/**
 * Bind a function to the mouseover event of each matched element.
 * @id jQuery.mouseover
 * @alias $.mouseover
 * @alias jQuery.prototype.mouseover
 * @param {Function} fn
 * @return {jQuery}
 */
function jQuery.mouseover(){};

/**
 * Displays each of the set of matched elements if they are hidden.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>show</b>(<b>speed</b>: String|Number, <b>callback</b>: Function) : jQuery<br>
 * <br>
 * Show all matched elements using a graceful animation and firing an optional callback after completion.<br>
 * <br>
 * @id jQuery.show
 * @alias $.show
 * @alias jQuery.prototype.show
 * @return {jQuery}
 */
function jQuery.show(){};

/**
 * Hides each of the set of matched elements if they are shown.
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>hide</b>(<b>speed</b>: String|Number, <b>callback</b>: Function) : jQuery<br>
 * <br>
 * Hide all matched elements using a graceful animation and firing an optional callback after completion.<br>
 * <br>
 * @id jQuery.hide
 * @alias jQuery.prototype.hide
 * @alias $.hide
 * @return {jQuery}
 */
function jQuery.hide(){};

/**
 * Reveal all matched elements by adjusting their height and firing an optional callback after completion.
 * @id jQuery.slideDown
 * @alias $.slideDown
 * @alias jQuery.prototype.slideDown
 * @param {String|Number} speed
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.slideDown(){};

/**
 * Hide all matched elements by adjusting their height and firing an optional callback after completion.
 * @id jQuery.slideUp
 * @alias $.slideUp
 * @alias jQuery.prototype.slideUp
 * @param {String|Number} speed
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.slideUp(){};

/**
 * Toggle the visibility of all matched elements by adjusting their height and firing an optional callback after completion.
 * @id jQuery.slideToggle
 * @alias $.slideToggle
 * @alias jQuery.prototype.slideToggle
 * @param {String|Number} speed
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.slideToggle(){};

/**
 * Fade in all matched elements by adjusting their opacity and firing an optional callback after completion.
 * @id jQuery.fadeIn
 * @alias $.fadeIn
 * @alias jQuery.prototype.fadeIn
 * @param {String|Number} speed
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.fadeIn(){};

/**
 * Fade out all matched elements by adjusting their opacity and firing an optional callback after completion.
 * @id jQuery.fadeOut
 * @alias $.fadeOut
 * @alias jQuery.prototype.fadeOut
 * @param {String|Number} speed
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.fadeOut(){};

/**
 * Fade the opacity of all matched elements to a specified opacity and firing an optional callback after completion.
 * @id jQuery.fadeTo
 * @alias $.fadeTo
 * @alias jQuery.prototype.fadeTo
 * @param {String|Number} speed
 * @param {Number} opacity
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.fadeTo(){};

/**
 * A function for making your own, custom, animations.
 * @id jQuery.animate
 * @alias $.animate
 * @alias jQuery.prototype.animate
 * @param {Hash} params
 * @param {String|Number} speed
 * @param {String} easing
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.animate(){};

/**
 * Load HTML from a remote file and inject it into the DOM, only 
 * if it's been modified by the server.<BR>
 * <BR>
 * This convenience method is being removed in favor of the long form use of $.ajax()<BR>
 * <BR>
 * <PRE>
 * $.ajax({ url: "some.php", ifModified: true, ...});
 * </PRE>
 * @id jQuery.loadIfModified
 * @alias $.loadIfModified
 * @alias jQuery.prototype.loadIfModified
 * @param {String} url
 * @param {Map} params
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.loadIfModified(){};

/**
 * Serializes a set of input elements into a string of data.
 * @id jQuery.serialize
 * @alias $.serialize
 * @alias jQuery.prototype.serialize
 * @return {String}
 */
function jQuery.serialize(){};

/**
 * Evaluate all script tags inside this jQuery.
 * @id jQuery.evalScripts
 * @alias $.evalScripts
 * @alias jQuery.prototype.evalScripts
 * @return {jQuery}
 */
function jQuery.evalScripts(){};

/**
 * Attach a function to be executed whenever an AJAX request begins and there is none already active.
 * @id jQuery.ajaxStart
 * @alias $.ajaxStart
 * @alias jQuery.prototype.ajaxStart
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxStart(){};

/**
 * Attach a function to be executed whenever all AJAX requests have ended.
 * @id jQuery.ajaxStop
 * @alias $.ajaxStop
 * @alias jQuery.prototype.ajaxStop
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxStop(){};

/**
 * Attach a function to be executed whenever an AJAX request completes.
 * @id jQuery.ajaxComplete
 * @alias $.ajaxComplete
 * @alias jQuery.prototype.ajaxComplete
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxComplete(){};

/**
 * Attach a function to be executed whenever an AJAX request completes successfully.
 * @id jQuery.ajaxSuccess
 * @alias $.ajaxSuccess
 * @alias jQuery.prototype.ajaxSuccess
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxSuccess(){};

/**
 * Attach a function to be executed whenever an AJAX request fails.
 * @id jQuery.ajaxError
 * @alias $.ajaxError
 * @alias jQuery.prototype.ajaxError
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxError(){};

/**
 * Attach a function to be executed before an AJAX request is sent.
 * @id jQuery.ajaxSend
 * @alias $.ajaxSend
 * @alias jQuery.prototype.ajaxSend
 * @param {Function} callback
 * @return {jQuery}
 */
function jQuery.ajaxSend(){};

/**
 * Load a remote page using an HTTP GET request, only if 
 * it has been modified since it was last retrieved.<BR>
 * <BR>
 * This convenience method is being removed in favor of the long form use of $.ajax()<BR>
 * <BR>
 * <PRE>
 * $.ajax({ url: "some.php", ifModified: true, ...});
 * </PRE>
 * @id jQuery.$.getIfModified
 * @alias $.getIfModified
 * @param {String} url
 * @param {Map} params
 * @param {Function} callback
 * @return {XMLHttpRequest}
 */
function jQuery.getIfModified(){};

/**
 * Loads, and executes, a remote JavaScript file using an HTTP GET request.
 * @id jQuery.$.getScript
 * @alias $.getScript
 * @param {String} url
 * @param {Function} callback
 * @return {XMLHttpRequest}
 */
function jQuery.getScript(){};

/**
 * Load JSON data using an HTTP GET request.
 * @id jQuery.$.getJSON
 * @alias $.getJSON
 * @param {String} url
 * @param {Map} params
 * @param {Function} callback
 * @return {XMLHttpRequest}
 */
function jQuery.getJSON(){};

/**
 * Load a remote page using an HTTP POST request.
 * @id jQuery.$.post
 * @alias $.post
 * @param {String} url
 * @param {Map} params
 * @param {Function} callback
 * @return {XMLHttpRequest}
 */
function jQuery.post(){};

/**
 * Set the timeout of all AJAX requests to a specific amount of time.<BR>
 * <BR>
 * This convenience method is being removed in favor of the long form 
 * use of the more-explicit $.ajaxSetup():<BR>
 * <BR>
 * <PRE>$.ajaxSetup({timeout: 3000});</PRE>
 * @id jQuery.$.ajaxTimeout
 * @alias $.ajaxTimeout
 * @param {Number} time
 * @return {undefined}
 */
function jQuery.ajaxTimeout(){};

/**
 * Setup global settings for AJAX requests.
 * @id jQuery.$.ajaxSetup
 * @alias $.ajaxSetup
 * @param {Map} settings
 * @return {undefined}
 */
function jQuery.ajaxSetup(){};

/**
 * Load a remote page using an HTTP request.
 * @id jQuery.$.ajax
 * @alias $.ajax
 * @param {Map} properties
 * @return {XMLHttpRequest}
 */
function jQuery.ajax(){};

/**
 * Add the previous selection to the current selection. 
 * <BR>Useful for traversing elements, and then adding something that was matched before the last traversion.
 * @id jQuery.$.andSelf
 * @alias $.andSelf
 * @return {jQuery}
 */
function jQuery.andSelf(){};

/**
 * Find all the child nodes inside the matched elements (including text nodes), or the content document, if the element is an iframe.
 * @id jQuery.$.contents
 * @alias $.contents
 * @return {jQuery}
 */
function jQuery.contents(){};


/**
 * Checks the current selection against a class and returns true, if at least one element of the selection has the given class.
 * @id jQuery.$.hasClass
 * @alias $.hasClass
 * @return {boolean}
 */
function jQuery.hasClass(){};

/**
 * Selects a subset of the matched elements.
 * @id jQuery.$.slice
 * @alias $.slice
 * @return {jQuery}
 */
function jQuery.slice(){};

/**
 * Find all sibling elements before the current element.
 * @id jQuery.$.prevAll
 * @alias $.prevAll
 * @return {jQuery}
 */
function jQuery.prevAll(){};

/**
 * Find all sibling elements after the current element.
 * @id jQuery.$.nextAll
 * @alias $.nextAll
 * @return {jQuery}
 */
function jQuery.nextAll(){};

/**
 * Wrap all the elements in the matched set into a single wrapper element.
 * @id jQuery.$.wrapAll
 * @alias $.wrapAll
 * @return {jQuery}
 */
function jQuery.wrapAll(){};

/**
 * Wrap the inner child contents of each matched element (including text nodes)
 * @id jQuery.$.wrapInner
 * @alias $.wrapInner
 * @return {jQuery}
 */
function jQuery.wrapInner(){};

/**
 * Replaces all matched elements with the specified HTML or DOM elements.
 * @id jQuery.$.replaceWith
 * @alias $.replaceWith
 * @return {jQuery}
 */
function jQuery.replaceWith(){};

/**
 * Replaces the elements matched by the specified selector with the matched elements.
 * @id jQuery.$.replaceAll
 * @alias $.replaceAll
 * @return {jQuery}
 */
function jQuery.replaceAll(){};

/**
 * This particular method triggers all bound event handlers on an element (for a specific event type) WITHOUT executing the browsers default actions.
 * @id jQuery.$.triggerHandler
 * @alias $.triggerHandler
 * @return {jQuery}
 */
function jQuery.triggerHandler(){};

/**
 * Stops all the currently running animations on all the specified elements.
 * @id jQuery.$.stop
 * @alias $.stop
 * @return {jQuery}
 */
function jQuery.stop(){};

/**
 * Returns a reference to the first element's queue (which is an array of functions).
 * <br>
 * <br><b>Alternatives</b><br>
 * <br>
 * <b>queue</b>(<b>callback</b>: Function) : jQuery<br>
 * <b>queue</b>(<b>queue</b>) : jQuery<br>
 * <br>
 *  * <br>
 * @id jQuery.$.queue
 * @alias $.queue
 * @return {jQuery}
 */
function jQuery.queue(){};

/**
 * Removes a queued function from the front of the queue and executes it.
 * @id jQuery.$.dequeue
 * @alias $.dequeue
 * @return {jQuery}
 */
function jQuery.dequeue(){};

/**
 * Serializes all forms and form elements (like the .serialize() method) but returns a JSON data structure for you to work with.
 * @id jQuery.$.serializeArray
 * @alias $.serializeArray
 * @return {Object}
 */
function jQuery.serializeArray(){};

/**
 * States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model
 * @id jQuery.$.boxModel
 * @alias $.boxModel
 * @return {Boolean}
 */
function jQuery.boxModel(){};

/**
 * Remove all duplicate elements from an array of elements.
 * @id jQuery.$.unique
 * @alias $.unique
 * @return {Array}
 */
function jQuery.unique(){};






